def xor(a, b):
    """
    Parameters:
        - a,b are strings like '000', '001' of equal length.
    Output:
        The bitwise XOR of a and b.
    """
    return ''.join(['1' if z1 != z2 else '0' for (z1,z2) in zip(a,b)])

def generate_coset(representative, subgroup):
    """
    Parameters:
        - representative is the representative of the coset. It is assumed that
          representative has the same length as each bitstring in subgroup.
        - subgroup is the subgroup for which we want to generate a coset.
    Output:
        The coset of subgroup generated by representative as a set of bitstrings.
    """
    return { xor(representative, h) for h in subgroup }


def generate_group_by_order(order, strings=['0', '1']):
    """
    Parameters:
        - order is the size of the group of bitstrings to be generated.
        - strings is a technical parameter which you should never have to set yourself.
    Output:
        A list of all bitstrings in the group of bitstrings with specified order.
    """
    if order == 1:
        return strings

    zero_branch = generate_group_by_order(order - 1, strings=[s + '0' for s in strings])
    one_branch = generate_group_by_order(order - 1, strings=[s + '1' for s in strings])
    return zero_branch + one_branch

def generate_cosets_for_subgroup(group, subgroup):
    """
    Parameters:
        - group is a list of bitstrings resembling the group of bitstrings of a certain length.
          It is assumed that group is closed and that all bitstrings have the same length and 
          that there are no duplicate strings.
        - subgroup is the same as group, but for the subgroup for which we want to generate cosets.
    Output:
        A list of cosets, where each cosets is modelled as a list of bitstrings.
    """
    group_set = set(group)
    cosets = []
    for representative in group:
        if representative not in group_set:
            continue
    
        coset = generate_coset(representative, subgroup)
        cosets.append(coset)
        for coset_member in coset:
            group_set.remove(coset_member)
    return cosets
